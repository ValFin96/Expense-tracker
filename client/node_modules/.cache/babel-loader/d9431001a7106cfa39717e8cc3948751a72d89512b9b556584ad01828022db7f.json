{"ast":null,"code":"var _jsxFileName = \"/Users/val/Desktop/Coding projects/Web Challenge/client/src/context/ExpensesContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with the default value\nexport const ExpensesContext = /*#__PURE__*/createContext(null);\nexport const ExpensesContextProvider = ({\n  children\n}) => {\n  _s();\n  const [expenses, setExpenses] = useState([]); // Replace 'any' with your expense type\n\n  return /*#__PURE__*/_jsxDEV(ExpensesContext.Provider, {\n    value: {\n      expenses,\n      setExpenses\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 11\n  }, this);\n};\n_s(ExpensesContextProvider, \"fvHkuU2kS79M/KpXWsEK8FpbhGg=\");\n_c = ExpensesContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ExpensesContextProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","ExpensesContext","ExpensesContextProvider","children","_s","expenses","setExpenses","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/val/Desktop/Coding projects/Web Challenge/client/src/context/ExpensesContext.tsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\nimport { ReactNode } from 'react';\n\ntype Expense={\nid: number;\n\n}\ntype ExpensesContextType = {\n    expenses: any[]; // Replace 'any' with your expense type\n    setExpenses: React.Dispatch<React.SetStateAction<any[]>>; // Same here for the type\n  };\n  \n  type ExpensesContextProviderProps = {\n    children: ReactNode;\n  };\n  \n  // Create the context with the default value\n  export const ExpensesContext = createContext<ExpensesContextType | null>(null);\n  \n  export const ExpensesContextProvider: React.FC<ExpensesContextProviderProps> = ({ children }) => {\n      const [expenses, setExpenses] = useState<any[]>([]); // Replace 'any' with your expense type\n  \n      return (\n          <ExpensesContext.Provider value={{ expenses, setExpenses }}>\n              {children}\n          </ExpensesContext.Provider>\n      );\n  }\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgBrD;AACA,OAAO,MAAMC,eAAe,gBAAGJ,aAAa,CAA6B,IAAI,CAAC;AAE9E,OAAO,MAAMK,uBAA+D,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAQ,EAAE,CAAC,CAAC,CAAC;;EAErD,oBACIE,OAAA,CAACC,eAAe,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,QAAQ;MAAEC;IAAY,CAAE;IAAAH,QAAA,EACtDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;AAAAR,EAAA,CARYF,uBAA+D;AAAAW,EAAA,GAA/DX,uBAA+D;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}